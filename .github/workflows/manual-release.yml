name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'prerelease'
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: 'Release created via manual trigger'

permissions:
  contents: write
  actions: read

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create and push tag
        id: create_tag
        run: |
          TAG_NAME="v${{ github.event.inputs.version }}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists!"
            exit 1
          fi

          # Create and push tag
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          name: PReviewer ${{ steps.create_tag.outputs.tag_name }}
          body: ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          generate_release_notes: true

  build-and-upload:
    needs: create-tag-and-release
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            artifact_pattern: '*.exe'
            content_type: 'application/octet-stream'
          - os: macos-latest
            platform: macos
            artifact_pattern: '*.zip'
            content_type: 'application/zip'
          - os: ubuntu-latest
            platform: linux
            artifact_pattern: '*.deb'
            content_type: 'application/vnd.debian.binary-package'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag-and-release.outputs.tag_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean npm cache
        run: npm cache clean --force
        continue-on-error: true

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        env:
          npm_config_cache: ${{ runner.temp }}/.npm
          ELECTRON_CACHE: ${{ runner.temp }}/.electron

      - name: Update package.json version
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Build and package
        run: npm run make
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: ${{ runner.temp }}/.electron
        timeout-minutes: 30

      - name: Find release assets
        id: find_assets
        shell: bash
        run: |
          # Find the built artifact
          asset_path=$(find out/make -name "${{ matrix.artifact_pattern }}" | head -1)

          if [ -z "$asset_path" ]; then
            echo "No artifact found matching pattern: ${{ matrix.artifact_pattern }}"
            exit 1
          fi

          echo "asset_path=$asset_path" >> $GITHUB_OUTPUT
          echo "Found asset: $asset_path"

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag-and-release.outputs.tag_name }}
          files: ${{ steps.find_assets.outputs.asset_path }}

  notify-completion:
    needs: [create-tag-and-release, build-and-upload]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: needs.build-and-upload.result == 'success'
        run: |
          echo "✅ Release ${{ needs.create-tag-and-release.outputs.tag_name }} created successfully!"
          echo "🔗 Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.create-tag-and-release.outputs.tag_name }}"

      - name: Notify Failure
        if: needs.build-and-upload.result == 'failure'
        run: |
          echo "❌ Release creation failed!"
          exit 1
